/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {                    
public:
    int findIndex(vector<int> &inorder, int i, int j, int val){        // RUNTIME HIGH//  
        for (int b = i; b<=j; b++){
            if (inorder[b]==val) return b;
        }
        return 0;
    }
    TreeNode* makeTree(vector<int> &inorder, vector<int> &postorder, int i, int j, int& p){
        if (i>j) return NULL;
        TreeNode* node = new TreeNode(postorder[p--]);
        if (i==j) return node;
        int in = findIndex(inorder, i, j, node->val);
        node->right = makeTree(inorder, postorder, in+1, j, p);
        node->left = makeTree(inorder, postorder, i, in-1, p);
        return node;
    }
    TreeNode* buildTree(vector<int> &inorder, vector<int> &postorder) {
        if (inorder.empty()) return NULL;
        int p = postorder.size()-1;
        return makeTree(inorder, postorder, 0, inorder.size()-1, p);
    }
};
