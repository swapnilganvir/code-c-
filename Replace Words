class Trynode {
public:
    bool isEnd;
    Trynode* children[26] = {};
    Trynode (){
        isEnd = false;
    }
};
class Solution {
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        Trynode* root = new Trynode();
        Trynode* curr = root;
        string ans;
        for(auto str : dictionary){
            for (char c : str) {
                if (curr->children[c - 'a'] == NULL) {
                    curr->children[c - 'a'] = new Trynode;
                }
                curr = curr->children[c - 'a'];
            }
            curr->isEnd = true;
            curr = root;
        }
        for(int i = 0; i < sentence.size(); i++){
            if(sentence[i] == ' '){
                ans += ' ';
                curr = root;
            }
            else if (curr->children[sentence[i] - 'a'] == NULL) {
                while (i < sentence.size() && sentence[i] != ' '){
                    ans += sentence[i++];
                }
                i--;
            }
            else{
                ans += sentence[i];
                curr = curr->children[sentence[i] - 'a'];
                if (curr->isEnd){
                    while(i < sentence.size() && sentence[i] != ' '){
                        i++;
                    }
                    i--;
                }
            }
        }
        return ans;
    }
};
