/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root){
        stack<TreeNode*> stk;
        TreeNode *prev = NULL, *curr = root;
        while (curr !=NULL || !stk.empty())
        {
            while(curr != NULL){
                stk.push(curr);
                curr = curr->left;
            }
            curr = stk.top();
            stk.pop();
            if(prev && curr->val <= prev->val)
                return false;
            prev = curr;
            curr = curr->right;
        }
        return true;
    }
};
-----------------------
class Solution {
public:
    bool isValidBST(TreeNode* root, long int minVal, long int maxVal){
        if(!root)
            return true;
        if(root->val <= minVal || root->val >= maxVal)
            return false;
        return isValidBST(root->left, minVal, root->val) && isValidBST(root->right, root->val, maxVal);
    }
    bool isValidBST(TreeNode* root) {
        if(!root){
            return true;
        }
        return isValidBST(root->left, LONG_MIN, root->val) && isValidBST(root->right, root->val, LONG_MAX);
    }
};
