class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> ans;
        if (nums.empty() || !k) return ans;
        unordered_map<int, int> mp;
        priority_queue<pair<int, int>> pq;
        
        for(int n:nums)
        {
            mp[n]++;
        }
        for(auto k:mp)
        {
            pq.push({k.second, k.first});
        }
        while(k--)
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
---------------------------
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> ans;
        unordered_map<int, int> mp;
        unordered_map<int, vector<int>> cmp;
        int s=nums.size();
        for(int n:nums)
        {
            mp[n]++;
        }
        for(auto k:mp)
        {
            cmp[k.second].push_back(k.first);
        }
        while(k>0){
            if(cmp.find(s) != cmp.end()){
                for(int n:cmp[s]){
                    ans.push_back(n);
                    k--;
                }
            }
            s--;
        }
        return ans;
    }
};
