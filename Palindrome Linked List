/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* reverseList(ListNode* head) {
        ListNode *pnext=NULL,*temp=NULL;
        if(head==NULL || head->next==NULL) return head;
        while(head){
            pnext=head->next;
            head->next=temp;
            temp=head;
            head=pnext;
        }
        return temp;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL) return 1;
        ListNode *s=head,*f=head,*head1=head;
        while(f){
            f=f->next;
            if(f) f=f->next;
            s=s->next;
        }
        ListNode *head2=reverseList(s);
        while(head1 && head2){
            if((head1->val)!=(head2->val)) return 0;
            head1=head1->next;
            head2=head2->next;
        }
        return 1;
    }
};
