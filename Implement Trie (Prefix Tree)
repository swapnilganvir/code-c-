class Trynode{
public:
    bool isEnd;
    Trynode* children[26] = {};                 //32ms//
    Trynode() {
        isEnd = false;
    }
};
class Trie {
    Trynode* root;
public:
    /** Initialize your data structure here. */
    Trie(){
        root = new Trynode();
    }
    
    // Inserts a word into the trie. //
    void insert(string word) {
        Trynode *node = root;
        for (char c : word) {
            if (node->children[c - 'a'] == NULL) {
                node->children[c - 'a'] = new Trynode;
            }
            node = node->children[c - 'a'];
        }
        node->isEnd = true;
    }
    
    // Returns if the word is in the trie. //
    bool search(string word) {
        Trynode* node = root;
        for (char c : word) {
            if (node->children[c - 'a'] == NULL) {
                return false;
            }
            node = node->children[c - 'a'];
        }
        return node->isEnd;
    }
    
    // Returns if there is any word in the trie that starts with the given prefix. //
    bool startsWith(string prefix) {
        Trynode* node = root;
        for (char c : prefix) {
            if (node->children[c - 'a'] == NULL) {
                return false;
            }
            node = node->children[c - 'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
