/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {    
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(root==NULL) return ans;
        stack<TreeNode*> stk; 
        TreeNode *curr=root,*prev=NULL;
        while(curr || !stk.empty()){
            while(curr){
                stk.push(curr);
                curr=curr->left;
            }
            while(curr==NULL && !stk.empty()){
                curr=stk.top();
                if(curr->right==NULL || curr->right==prev){
                    ans.push_back(curr->val);
                    stk.pop();
                    prev=curr;
                    curr=NULL;
                }
                else curr=curr->right;
            }
        }
        return ans;
    }
};
------------------------------------
class Solution {
    vector<int> rev(vector<int> v){
        int t,j=v.size()-1;
        for(int i=0;i<(j+1)/2;i++){
            t=v[i];
            v[i]=v[j-i];
            v[j-i]=t;
        }
        return v;
    }
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(!root) return ans;
        if(root->left==NULL && root->right==NULL){
            ans.push_back(root->val);
            return ans;
        }
        stack<TreeNode*> stk;
        stk.push(root);
        TreeNode *curr;
        
        while(!stk.empty()){
            curr=stk.top();
            ans.push_back(curr->val);
            stk.pop();
            if(curr->left) stk.push(curr->left);
            if(curr->right) stk.push(curr->right);
        }
        return rev(ans);
    }
};
