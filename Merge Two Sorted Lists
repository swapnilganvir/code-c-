/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) return l2;
        else if(l2 == NULL) return l1;                   //RECURSIVE //
        ListNode* result = NULL;
        if(l1->val <= l2->val){
            result = l1;
            result->next = mergeTwoLists(l1->next,l2);
        }
        else{
            result = l2;
            result->next = mergeTwoLists(l2->next,l1);
        }
        return result;
    }
};

-----------------
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* head = new ListNode(0);
        ListNode* result = head;
        while(l1 && l2){
            if(l1->val <= l2->val){
                result->next = l1;
                l1 = l1->next;
            }
            else{
                result->next = l2;
                l2 = l2->next;
            }
            result = result->next;
        }
        result->next = (l2 ? l2 : l1);
        return head->next;
    }
};
