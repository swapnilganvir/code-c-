/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> v;
        stack<pair<Node*, int>> stk;
        Node *curr=root;
        int i=0;
        while(curr || !stk.empty()){
            if(curr){
                stk.push({curr, i});
                v.push_back(curr->val);
                i=0;
            }
            else{
                curr=stk.top().first;
                i++;
            }
            if(curr->children.size() > i){
                curr=curr->children[i];
            }
            else{
                i=stk.top().second;
                stk.pop();
                curr=NULL;
            }
        }
        return v;
    }
};
------------------------------
class Solution {
public:
    void r(vector<int>& v, Node* root){
        v.push_back(root->val);
        if(!root->children.empty()){
            for(auto a : root->children){
                r(v, a);
            }
        }
    }
    vector<int> preorder(Node* root) {
        vector<int> v;
        if(root) r(v, root);
        return v;
    }
};
